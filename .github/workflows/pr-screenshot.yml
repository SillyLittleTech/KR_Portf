name: e2e-screenshot
permissions:
  contents: read
  pull-requests: write
  issues: write 

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests (takes screenshot)
        run: npm run test:e2e

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: portfolio-screenshot
          path: |
            playwright-logs/portfolio-working.png
            playwright-report/**
        if-no-files-found: warn

      - name: Comment on PR with inline screenshot
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const core = require('@actions/core');
            const path = 'playwright-logs/portfolio-working.png';

            if (!fs.existsSync(path)) {
              core.setFailed(`Screenshot not found at ${path}`);
              return;
            }

            const fileData = fs.readFileSync(path);

            // Same API used by the GitHub web UI when you drop an image in a comment
            const res = await github.graphql(
              `mutation($file: Upload!) {
                 uploadFile(file: $file) { url }
               }`,
              { file: fileData }
            );

            const imageUrl = res.uploadFile.url;

            const body = [
              '**Automated Playwright Screenshot**',
              '',
              `![Portfolio Screenshot](${imageUrl})`,
              '',
              `_Run: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}_`
            ].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      # Optional: mark older bot comments as outdated
      - name: Find previous screenshot comments
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v3
        id: find_comments
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'Automated Playwright Screenshot'

      - name: Outdate previous screenshot comments
        if: steps.find_comments.outputs.comment-ids != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comments.outputs.comment-ids.split(' ')[0] }}
          body: '[OUTDATED] See the latest comment above.'
