name: e2e-screenshot

permissions:
  contents: write       # needed to push to gh-pages
  pages: write          # deploy with actions/deploy-pages
  id-token: write       # required by actions/deploy-pages
  pull-requests: write
  issues: write

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run Playwright tests (takes screenshot)
        run: npm run test:e2e

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: portfolio-screenshot
          path: |
            playwright-logs/portfolio-working.png
            playwright-logs/portfolio-mobile.png
            playwright-report/**

      - name: Add screenshot to job summary
        run: |
          has_any=false
          if [ -f playwright-logs/portfolio-working.png ] || [ -f playwright-logs/portfolio-mobile.png ]; then
            has_any=true
          fi

          if [ "$has_any" = true ]; then
            {
              echo "## Web Render"
              if [ -f playwright-logs/portfolio-working.png ]; then
                echo
                echo "### Web"
                echo
                echo "![Web Render](playwright-logs/portfolio-working.png)"
              fi
              if [ -f playwright-logs/portfolio-mobile.png ]; then
                echo
                echo "### Mobile"
                echo
                echo "![Mobile Render](playwright-logs/portfolio-mobile.png)"
              fi
              echo
              echo "_This screenshot was generated by Playwright during the latest workflow run._"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "⚠️ Screenshots not found." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Prepare Pages payload and workspace archive
        id: prep_pages
        run: |
          run_dir=${{ github.run_id }}
          pages_root="_screenshot_publish/(dev-Shots)/screenshots/$run_dir"
          repo_root="(dev-Shots)/screenshots/$run_dir"

          rm -rf _screenshot_publish
          mkdir -p "$pages_root"
          mkdir -p "$repo_root"

          found=false
          found_web=false
          found_mobile=false

          if [ -f playwright-logs/portfolio-working.png ]; then
            cp playwright-logs/portfolio-working.png "$pages_root/portfolio-working.png"
            cp playwright-logs/portfolio-working.png "$repo_root/portfolio-working.png"
            found=true
            found_web=true
          fi

          if [ -f playwright-logs/portfolio-mobile.png ]; then
            cp playwright-logs/portfolio-mobile.png "$pages_root/portfolio-mobile.png"
            cp playwright-logs/portfolio-mobile.png "$repo_root/portfolio-mobile.png"
            found=true
            found_mobile=true
          fi

          if [ "$found" = true ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

          if [ "$found_web" = true ]; then
            echo "found_web=true" >> "$GITHUB_OUTPUT"
          else
            echo "found_web=false" >> "$GITHUB_OUTPUT"
          fi

          if [ "$found_mobile" = true ]; then
            echo "found_mobile=true" >> "$GITHUB_OUTPUT"
          else
            echo "found_mobile=false" >> "$GITHUB_OUTPUT"
          fi

      # Publish screenshot via GitHub Pages for same-repo runs/PRs
      - name: Configure GitHub Pages
        if: steps.prep_pages.outputs.found == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        uses: actions/configure-pages@v4

      - name: Upload screenshot to Pages artifact
        if: steps.prep_pages.outputs.found == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        uses: actions/upload-pages-artifact@v3
        with:
          path: _screenshot_publish

      - name: Deploy GitHub Pages site
        id: deploy
        if: steps.prep_pages.outputs.found == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        uses: actions/deploy-pages@v4
        with:
          preview: ${{ github.event_name == 'pull_request' }}

      - name: Add GitHub Pages link to job summary
        if: steps.prep_pages.outputs.found == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        run: |
          page_url="${{ steps.deploy.outputs.preview_url }}"
          if [ -z "$page_url" ]; then
            page_url="${{ steps.deploy.outputs.page_url }}"
          fi

          if [ -n "$page_url" ]; then
            base_url="${page_url%/}/(dev-Shots)"
            web_found="${{ steps.prep_pages.outputs.found_web }}"
            mobile_found="${{ steps.prep_pages.outputs.found_mobile }}"
            {
              echo "### GitHub Pages Screenshots"
              echo
              if [ "$web_found" = 'true' ]; then
                echo "- [View Web](${base_url}/screenshots/${{ github.run_id }}/portfolio-working.png)"
              fi
              if [ "$mobile_found" = 'true' ]; then
                echo "- [View Mobile](${base_url}/screenshots/${{ github.run_id }}/portfolio-mobile.png)"
              fi
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      # Comment inline (same-repo PRs only)
      - name: Comment on PR with inline screenshot (Pages URL)
        if: steps.prep_pages.outputs.found == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v7
        env:
          PAGE_URL: ${{ steps.deploy.outputs.page_url }}
          PREVIEW_URL: ${{ steps.deploy.outputs.preview_url }}
          WEB_FOUND: ${{ steps.prep_pages.outputs.found_web }}
          MOBILE_FOUND: ${{ steps.prep_pages.outputs.found_mobile }}
        with:
          script: |
            const runId = process.env.GITHUB_RUN_ID;
            const baseUrl = (process.env.PREVIEW_URL || process.env.PAGE_URL || '').replace(/\/$/, '');
            if (!baseUrl) {
              core.info('Pages URL missing; skipping comment.');
              return;
            }
            const siteBaseUrl = `${baseUrl}/(dev-Shots)`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issueNumber = context.issue.number;
            const marker = '<!-- web-render-screenshot -->';
            const commitSha = context.sha.slice(0, 7);
            const commitUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/commit/${context.sha}`;
            const webFound = process.env.WEB_FOUND === 'true';
            const mobileFound = process.env.MOBILE_FOUND === 'true';
            const sections = [
              marker,
              '**Web Render**',
              '',
              `Commit: [\`${commitSha}\`](${commitUrl})`,
              ''
            ];

            if (webFound) {
              const webImageUrl = `${siteBaseUrl}/screenshots/${runId}/portfolio-working.png`;
              sections.push(
                '<details>',
                '<summary>View Web</summary>',
                '',
                `<img src="${webImageUrl}" alt="Playwright screenshot of the portfolio (web)" width="640" />`,
                '',
                '</details>',
                ''
              );
            }

            if (mobileFound) {
              const mobileImageUrl = `${siteBaseUrl}/screenshots/${runId}/portfolio-mobile.png`;
              sections.push(
                '<details>',
                '<summary>View Mobile</summary>',
                '',
                `<img src="${mobileImageUrl}" alt="Playwright screenshot of the portfolio (mobile)" width="360" />`,
                '',
                '</details>',
                ''
              );
            }

            if (!webFound && !mobileFound) {
              sections.push('_No screenshots available for this run._', '');
            }

            sections.push('_This screenshot was generated by Playwright during the latest workflow run._');

            const body = sections.join('\n');

            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number: issueNumber,
            });

            const existing = comments.find((comment) => comment.body && comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body,
              });
            }

      # Fallback for forked PRs (can’t push to gh-pages)
      - name: Comment on PR (fork fallback)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const marker = '<!-- web-render-screenshot -->';
            const commitSha = context.sha.slice(0, 7);
            const commitUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/commit/${context.sha}`;
            const body = [
              marker,
              '**Web Render**',
              '',
              `Commit: [\`${commitSha}\`](${commitUrl})`,
              '',
              'Inline image is unavailable for forked PRs due to token restrictions.',
              '',
              `Please view it in the [workflow run summary](${runUrl}).`,
              '',
              '_This screenshot was generated by Playwright during the latest workflow run._'
            ].join('\n');

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issueNumber = context.issue.number;

            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number: issueNumber,
            });

            const existing = comments.find((comment) => comment.body && comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body,
              });
            }
