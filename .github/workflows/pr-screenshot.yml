name: e2e-screenshot

permissions:
  contents: write       # needed to push to gh-pages
  pull-requests: write
  issues: write

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests (takes screenshot)
        run: npm run test:e2e

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: portfolio-screenshot
          path: |
            playwright-logs/portfolio-working.png
            playwright-report/**

      - name: Add screenshot to job summary
        run: |
          if [ -f playwright-logs/portfolio-working.png ]; then
            {
              echo "## Automated Playwright Screenshot"
              echo
              echo "![Playwright Screenshot](playwright-logs/portfolio-working.png)"
              echo
              echo "_This screenshot was generated by Playwright during the latest workflow run._"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "⚠️ Screenshot not found." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Prepare gh-pages payload
        id: prep_pages
        run: |
          mkdir -p _screenshot_publish/screenshots/${{ github.run_id }}
          if [ -f playwright-logs/portfolio-working.png ]; then
            cp playwright-logs/portfolio-working.png _screenshot_publish/screenshots/${{ github.run_id }}/portfolio-working.png
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      # Publish screenshot to gh-pages for same-repo runs/PRs
      - name: Publish screenshot to gh-pages
        if: steps.prep_pages.outputs.found == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _screenshot_publish
          keep_files: true
          allow_empty_commit: false
          commit_message: "docs(screenshot): ${{ github.run_id }}"

      # Comment inline (same-repo PRs only)
      - name: Comment on PR with inline screenshot (gh-pages URL)
        if: steps.prep_pages.outputs.found == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runId = process.env.GITHUB_RUN_ID;
            const imageUrl = `https://${owner}.github.io/${repo}/screenshots/${runId}/portfolio-working.png`;

            const body = [
              '**Automated Playwright Screenshot**',
              '',
              `![Playwright Screenshot](${imageUrl})`,
              '',
              '_This screenshot was generated by Playwright during the latest workflow run._'
            ].join('\n');

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: context.issue.number,
              body
            });

      # Fallback for forked PRs (can’t push to gh-pages)
      - name: Comment on PR (fork fallback)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = [
              '**Automated Playwright Screenshot**',
              '',
              'Inline image is unavailable for forked PRs due to token restrictions.',
              '',
              `Please view it in the [workflow run summary](${runUrl}).`
            ].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            })

      # Optional tidy-up: mark old bot comments as outdated
      - name: Find previous screenshot comments
        if: github.event_name == 'pull_request'
        id: find_comments
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'Automated Playwright Screenshot'

      - name: Outdate previous screenshot comment
        if: steps.find_comments.outputs.comment-id != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comments.outputs.comment-id }}
          body: '[OUTDATED] See the latest comment above.'
