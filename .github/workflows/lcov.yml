name: Generate and Upload LCOV Coverage to DeepSource

on:
  push:
    branches:
      - main # This triggers the workflow on direct pushes to the 'main' branch
  pull_request:
    branches:
      - '*' # This triggers the workflow on pull requests targeting *any* branch

jobs:
  swift_coverage:
    runs-on: macos-latest # Recommended for Swift/Xcode projects

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Swift tests and generate LCOV
      # This step assumes your Swift project is an Xcode workspace and has a scheme named "DashCam".
      # You might need to adjust the workspace, scheme, and destination to match your project setup.
      # The output LCOV file will be placed directly in the '$DashCam!' directory.
      run: |
        # Build and test the Swift project with code coverage enabled
        # Replace "DashCam" with your actual scheme name if different.
        # Replace "platform=iOS Simulator,name=iPhone 15" with your desired destination.
        xcodebuild test \
          -workspace "$DashCam!/DashCam.xcworkspace" \
          -scheme "DashCam" \
          -destination "platform=iOS Simulator,name=iPhone 15" \
          -enableCodeCoverage YES \
          -resultBundlePath "$DashCam!/TestResults.xcresult"

        # Export LCOV report from the generated result bundle
        # The output file will be named 'coverage.lcov' within the '$DashCam!' directory.
        xcrun llvm-cov export -format="lcov" \
          "$DashCam!/TestResults.xcresult/Coverage.profdata" \
          > "$DashCam!/coverage.lcov"

    - name: Install DeepSource CLI
      uses: deepsource/cli-action@v1

    - name: Upload Swift LCOV report to DeepSource
      env:
        DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }} # Ensure this secret is configured in your repository
      run: |
        if [ -f "$DashCam!/coverage.lcov" ]; then
          deepsource report --analyzer test-coverage --key swift --value "$DashCam!/coverage.lcov"
        else
          echo "Swift LCOV report not found at $DashCam!/coverage.lcov"
          exit 1
        fi

  js_ts_coverage:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Use a Node.js version compatible with your project

    - name: Install JavaScript dependencies
      run: npm ci # Or `yarn install` if you use Yarn

    - name: Run JavaScript/TypeScript tests and generate LCOV
      # This command assumes your `npm test` script runs a test runner like Vitest or Jest.
      # It also assumes you've configured your test runner to output LCOV reports to `src/coverage/`.
      # For Vitest, you can set `coverage.reportsDirectory: 'src/coverage'` in `vite.config.ts` or `vitest.config.ts`.
      # For Jest, you can set `coverageDirectory: 'src/coverage'` in `jest.config.js`.
      run: npm test -- --coverage --coverageReporters=lcov --coverageDirectory=src/coverage

    - name: Install DeepSource CLI
      run: |
        curl https://deepsource.io/cli | sh
        sudo mv deepsource /usr/local/bin/

    - name: Upload JavaScript/TypeScript LCOV report to DeepSource
      env:
        DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }} # Ensure this secret is configured in your repository
      run: |
        if [ -f "src/coverage/lcov.info" ]; then
          deepsource report --analyzer test-coverage --key js-ts --value "src/coverage/lcov.info"
        else
          echo "JavaScript/TypeScript LCOV report not found at src/coverage/lcov.info"
          exit 1
        fi
