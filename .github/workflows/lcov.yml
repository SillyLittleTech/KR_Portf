name: Generate and Upload LCOV Coverage to DeepSource

on:
  push:
    branches:
      - main # This triggers the workflow on direct pushes to the 'main' branch
      - deepsource-tc # This triggers the workflow on direct pushes to the 'deepsource-tc' branch
  pull_request:
    branches:
      - '*' # This triggers the workflow on pull requests targeting *any* branch

jobs:
  swift_coverage:
    runs-on: macos-latest # Recommended for Swift/Xcode projects

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Swift tests and generate LCOV
      # This step uses the Xcode project and has a scheme named "DashCam".
      # You might need to adjust the scheme and destination to match your project setup.
      # The output LCOV file will be placed directly in the '$DashCam!' directory.
      run: |
        # Navigate to the project directory
        cd "\$DashCam!"
        
        # Build and test the Swift project with code coverage enabled
        # Using -project instead of -workspace since DashCam.xcodeproj exists
        xcodebuild test \
          -project "DashCam.xcodeproj" \
          -scheme "DashCam" \
          -destination "platform=macOS" \
          -enableCodeCoverage YES \
          -resultBundlePath "TestResults.xcresult"

        # Export LCOV report from the generated result bundle
        # The output file will be named 'coverage.lcov' within the '$DashCam!' directory.
        xcrun llvm-cov export -format="lcov" \
          "TestResults.xcresult/Coverage.profdata" \
          > "coverage.lcov"

    - name: Install DeepSource CLI
      run: |
        curl https://deepsource.io/cli | sh
        # The installer places the binary in ./bin/deepsource
        sudo mv ./bin/deepsource /usr/local/bin/

    - name: Upload Swift LCOV report to DeepSource
      env:
        DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }} # Ensure this secret is configured in your repository
      run: |
        if [ -f "\$DashCam!/coverage.lcov" ]; then
          deepsource report --analyzer test-coverage --key swift --value "\$DashCam!/coverage.lcov"
        else
          echo "Swift LCOV report not found at \$DashCam!/coverage.lcov"
          exit 1
        fi

  js_ts_coverage:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Use a Node.js version compatible with your project

    - name: Install JavaScript dependencies
      run: npm ci # Or `yarn install` if you use Yarn

    - name: Run JavaScript/TypeScript tests and generate LCOV
      # This command checks if a test script exists and runs it with coverage.
      # Currently, this project uses Playwright for E2E tests but doesn't have unit test coverage setup.
      # This step will be skipped if no test script is available.
      run: |
        if npm run test --silent 2>/dev/null; then
          npm test -- --coverage.enabled --coverage.reporter=lcov --coverage.reportsDirectory=src/coverage
        else
          echo "No npm test script found. Skipping coverage generation."
          echo "To enable coverage, add a test script with Vitest or Jest."
          exit 0
        fi

    - name: Install DeepSource CLI
      run: |
        curl https://deepsource.io/cli | sh
        # The installer places the binary in ./bin/deepsource
        sudo mv ./bin/deepsource /usr/local/bin/

    - name: Upload JavaScript/TypeScript LCOV report to DeepSource
      env:
        DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }} # Ensure this secret is configured in your repository
      run: |
        if [ -f "src/coverage/lcov.info" ]; then
          deepsource report --analyzer test-coverage --key js-ts --value "src/coverage/lcov.info"
          echo "Successfully uploaded JavaScript/TypeScript coverage report."
        else
          echo "JavaScript/TypeScript LCOV report not found at src/coverage/lcov.info"
          echo "This is expected if no test script is configured. Skipping upload."
        fi
